// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.20.3
// source: math.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperandA int64 `protobuf:"varint,1,opt,name=operand_a,json=operandA,proto3" json:"operand_a,omitempty"`
	OperandB int64 `protobuf:"varint,2,opt,name=operand_b,json=operandB,proto3" json:"operand_b,omitempty"`
}

func (x *MathRequest) Reset() {
	*x = MathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_math_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MathRequest) ProtoMessage() {}

func (x *MathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_math_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MathRequest.ProtoReflect.Descriptor instead.
func (*MathRequest) Descriptor() ([]byte, []int) {
	return file_math_proto_rawDescGZIP(), []int{0}
}

func (x *MathRequest) GetOperandA() int64 {
	if x != nil {
		return x.OperandA
	}
	return 0
}

func (x *MathRequest) GetOperandB() int64 {
	if x != nil {
		return x.OperandB
	}
	return 0
}

type MathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       int64  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *MathResponse) Reset() {
	*x = MathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_math_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MathResponse) ProtoMessage() {}

func (x *MathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_math_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MathResponse.ProtoReflect.Descriptor instead.
func (*MathResponse) Descriptor() ([]byte, []int) {
	return file_math_proto_rawDescGZIP(), []int{1}
}

func (x *MathResponse) GetResult() int64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *MathResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_math_proto protoreflect.FileDescriptor

var file_math_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x22, 0x47, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x41, 0x12, 0x1b, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x42, 0x22, 0x4b, 0x0a, 0x0c, 0x4d, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x84, 0x05, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x68, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x12, 0x0f, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x12, 0x0f, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x53, 0x71, 0x75, 0x61, 0x72,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x61,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x53, 0x69, 0x6e, 0x12,
	0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x43, 0x6f, 0x73, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03,
	0x54, 0x61, 0x6e, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x47, 0x63, 0x64,
	0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x4c, 0x63, 0x6d, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a,
	0x05, 0x2e, 0x2f, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_math_proto_rawDescOnce sync.Once
	file_math_proto_rawDescData = file_math_proto_rawDesc
)

func file_math_proto_rawDescGZIP() []byte {
	file_math_proto_rawDescOnce.Do(func() {
		file_math_proto_rawDescData = protoimpl.X.CompressGZIP(file_math_proto_rawDescData)
	})
	return file_math_proto_rawDescData
}

var file_math_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_math_proto_goTypes = []interface{}{
	(*MathRequest)(nil),  // 0: pb.MathRequest
	(*MathResponse)(nil), // 1: pb.MathResponse
}
var file_math_proto_depIdxs = []int32{
	0,  // 0: pb.MathService.Add:input_type -> pb.MathRequest
	0,  // 1: pb.MathService.Subtract:input_type -> pb.MathRequest
	0,  // 2: pb.MathService.Multiply:input_type -> pb.MathRequest
	0,  // 3: pb.MathService.Divide:input_type -> pb.MathRequest
	0,  // 4: pb.MathService.Power:input_type -> pb.MathRequest
	0,  // 5: pb.MathService.SquareRoot:input_type -> pb.MathRequest
	0,  // 6: pb.MathService.Factorial:input_type -> pb.MathRequest
	0,  // 7: pb.MathService.Logarithm:input_type -> pb.MathRequest
	0,  // 8: pb.MathService.Sin:input_type -> pb.MathRequest
	0,  // 9: pb.MathService.Cos:input_type -> pb.MathRequest
	0,  // 10: pb.MathService.Tan:input_type -> pb.MathRequest
	0,  // 11: pb.MathService.RandomNumber:input_type -> pb.MathRequest
	0,  // 12: pb.MathService.Gcd:input_type -> pb.MathRequest
	0,  // 13: pb.MathService.Lcm:input_type -> pb.MathRequest
	1,  // 14: pb.MathService.Add:output_type -> pb.MathResponse
	1,  // 15: pb.MathService.Subtract:output_type -> pb.MathResponse
	1,  // 16: pb.MathService.Multiply:output_type -> pb.MathResponse
	1,  // 17: pb.MathService.Divide:output_type -> pb.MathResponse
	1,  // 18: pb.MathService.Power:output_type -> pb.MathResponse
	1,  // 19: pb.MathService.SquareRoot:output_type -> pb.MathResponse
	1,  // 20: pb.MathService.Factorial:output_type -> pb.MathResponse
	1,  // 21: pb.MathService.Logarithm:output_type -> pb.MathResponse
	1,  // 22: pb.MathService.Sin:output_type -> pb.MathResponse
	1,  // 23: pb.MathService.Cos:output_type -> pb.MathResponse
	1,  // 24: pb.MathService.Tan:output_type -> pb.MathResponse
	1,  // 25: pb.MathService.RandomNumber:output_type -> pb.MathResponse
	1,  // 26: pb.MathService.Gcd:output_type -> pb.MathResponse
	1,  // 27: pb.MathService.Lcm:output_type -> pb.MathResponse
	14, // [14:28] is the sub-list for method output_type
	0,  // [0:14] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_math_proto_init() }
func file_math_proto_init() {
	if File_math_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_math_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_math_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_math_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_math_proto_goTypes,
		DependencyIndexes: file_math_proto_depIdxs,
		MessageInfos:      file_math_proto_msgTypes,
	}.Build()
	File_math_proto = out.File
	file_math_proto_rawDesc = nil
	file_math_proto_goTypes = nil
	file_math_proto_depIdxs = nil
}

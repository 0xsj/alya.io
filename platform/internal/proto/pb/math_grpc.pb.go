// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: math.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MathService_Add_FullMethodName          = "/pb.MathService/Add"
	MathService_Subtract_FullMethodName     = "/pb.MathService/Subtract"
	MathService_Multiply_FullMethodName     = "/pb.MathService/Multiply"
	MathService_Divide_FullMethodName       = "/pb.MathService/Divide"
	MathService_Power_FullMethodName        = "/pb.MathService/Power"
	MathService_SquareRoot_FullMethodName   = "/pb.MathService/SquareRoot"
	MathService_Factorial_FullMethodName    = "/pb.MathService/Factorial"
	MathService_Logarithm_FullMethodName    = "/pb.MathService/Logarithm"
	MathService_Sin_FullMethodName          = "/pb.MathService/Sin"
	MathService_Cos_FullMethodName          = "/pb.MathService/Cos"
	MathService_Tan_FullMethodName          = "/pb.MathService/Tan"
	MathService_RandomNumber_FullMethodName = "/pb.MathService/RandomNumber"
	MathService_Gcd_FullMethodName          = "/pb.MathService/Gcd"
	MathService_Lcm_FullMethodName          = "/pb.MathService/Lcm"
)

// MathServiceClient is the client API for MathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MathServiceClient interface {
	Add(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Subtract(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Multiply(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Divide(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Power(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	SquareRoot(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Factorial(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Logarithm(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Sin(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Cos(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Tan(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	RandomNumber(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Gcd(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
	Lcm(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error)
}

type mathServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMathServiceClient(cc grpc.ClientConnInterface) MathServiceClient {
	return &mathServiceClient{cc}
}

func (c *mathServiceClient) Add(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Subtract(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Subtract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Multiply(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Multiply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Divide(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Divide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Power(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Power_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) SquareRoot(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_SquareRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Factorial(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Factorial_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Logarithm(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Logarithm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Sin(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Sin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Cos(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Cos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Tan(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Tan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) RandomNumber(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_RandomNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Gcd(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Gcd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mathServiceClient) Lcm(ctx context.Context, in *MathRequest, opts ...grpc.CallOption) (*MathResponse, error) {
	out := new(MathResponse)
	err := c.cc.Invoke(ctx, MathService_Lcm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathServiceServer is the server API for MathService service.
// All implementations must embed UnimplementedMathServiceServer
// for forward compatibility
type MathServiceServer interface {
	Add(context.Context, *MathRequest) (*MathResponse, error)
	Subtract(context.Context, *MathRequest) (*MathResponse, error)
	Multiply(context.Context, *MathRequest) (*MathResponse, error)
	Divide(context.Context, *MathRequest) (*MathResponse, error)
	Power(context.Context, *MathRequest) (*MathResponse, error)
	SquareRoot(context.Context, *MathRequest) (*MathResponse, error)
	Factorial(context.Context, *MathRequest) (*MathResponse, error)
	Logarithm(context.Context, *MathRequest) (*MathResponse, error)
	Sin(context.Context, *MathRequest) (*MathResponse, error)
	Cos(context.Context, *MathRequest) (*MathResponse, error)
	Tan(context.Context, *MathRequest) (*MathResponse, error)
	RandomNumber(context.Context, *MathRequest) (*MathResponse, error)
	Gcd(context.Context, *MathRequest) (*MathResponse, error)
	Lcm(context.Context, *MathRequest) (*MathResponse, error)
	mustEmbedUnimplementedMathServiceServer()
}

// UnimplementedMathServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMathServiceServer struct {
}

func (UnimplementedMathServiceServer) Add(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedMathServiceServer) Subtract(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subtract not implemented")
}
func (UnimplementedMathServiceServer) Multiply(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedMathServiceServer) Divide(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Divide not implemented")
}
func (UnimplementedMathServiceServer) Power(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Power not implemented")
}
func (UnimplementedMathServiceServer) SquareRoot(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SquareRoot not implemented")
}
func (UnimplementedMathServiceServer) Factorial(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factorial not implemented")
}
func (UnimplementedMathServiceServer) Logarithm(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logarithm not implemented")
}
func (UnimplementedMathServiceServer) Sin(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sin not implemented")
}
func (UnimplementedMathServiceServer) Cos(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cos not implemented")
}
func (UnimplementedMathServiceServer) Tan(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tan not implemented")
}
func (UnimplementedMathServiceServer) RandomNumber(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RandomNumber not implemented")
}
func (UnimplementedMathServiceServer) Gcd(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gcd not implemented")
}
func (UnimplementedMathServiceServer) Lcm(context.Context, *MathRequest) (*MathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lcm not implemented")
}
func (UnimplementedMathServiceServer) mustEmbedUnimplementedMathServiceServer() {}

// UnsafeMathServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MathServiceServer will
// result in compilation errors.
type UnsafeMathServiceServer interface {
	mustEmbedUnimplementedMathServiceServer()
}

func RegisterMathServiceServer(s grpc.ServiceRegistrar, srv MathServiceServer) {
	s.RegisterService(&MathService_ServiceDesc, srv)
}

func _MathService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Add(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Subtract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Subtract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Subtract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Subtract(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Multiply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Multiply(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Divide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Divide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Divide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Divide(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Power_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Power(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Power_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Power(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_SquareRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).SquareRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_SquareRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).SquareRoot(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Factorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Factorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Factorial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Factorial(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Logarithm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Logarithm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Logarithm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Logarithm(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Sin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Sin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Sin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Sin(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Cos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Cos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Cos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Cos(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Tan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Tan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Tan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Tan(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_RandomNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).RandomNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_RandomNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).RandomNumber(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Gcd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Gcd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Gcd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Gcd(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MathService_Lcm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServiceServer).Lcm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MathService_Lcm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServiceServer).Lcm(ctx, req.(*MathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MathService_ServiceDesc is the grpc.ServiceDesc for MathService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MathService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MathService",
	HandlerType: (*MathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _MathService_Add_Handler,
		},
		{
			MethodName: "Subtract",
			Handler:    _MathService_Subtract_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _MathService_Multiply_Handler,
		},
		{
			MethodName: "Divide",
			Handler:    _MathService_Divide_Handler,
		},
		{
			MethodName: "Power",
			Handler:    _MathService_Power_Handler,
		},
		{
			MethodName: "SquareRoot",
			Handler:    _MathService_SquareRoot_Handler,
		},
		{
			MethodName: "Factorial",
			Handler:    _MathService_Factorial_Handler,
		},
		{
			MethodName: "Logarithm",
			Handler:    _MathService_Logarithm_Handler,
		},
		{
			MethodName: "Sin",
			Handler:    _MathService_Sin_Handler,
		},
		{
			MethodName: "Cos",
			Handler:    _MathService_Cos_Handler,
		},
		{
			MethodName: "Tan",
			Handler:    _MathService_Tan_Handler,
		},
		{
			MethodName: "RandomNumber",
			Handler:    _MathService_RandomNumber_Handler,
		},
		{
			MethodName: "Gcd",
			Handler:    _MathService_Gcd_Handler,
		},
		{
			MethodName: "Lcm",
			Handler:    _MathService_Lcm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "math.proto",
}
